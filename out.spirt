module.dialect = spv.Module(version: 1.0, spv.Capability.Shader, spv.MemoryModel.GLSL450)

module.debug_info = spv.Module.DebugInfo(
  generator: spv.Tool(id: 15),
  source_languages: {
    spv.SourceLanguage.GLSL(version: 450): {},
  },
)

type T0 = spv.OpTypeImage(SampledType: f32, spv.Dim.2D, Depth: 0, Arrayed: 0, MS: 0, Sampled: 1, spv.ImageFormat.Unknown)

type T1 = spv.OpTypePointer(spv.StorageClass.UniformConstant, T0)

type T2 = spv.OpTypePointer(spv.StorageClass.UniformConstant, spv.OpTypeSampler)

type T3 = spv.OpTypeSampledImage(ImageType: T0)

#[spv.Decoration.Location(Location: 0)]
global_var GV`color`(spv.StorageClass.Output): f32×4

#[spv.Decoration.Binding(BindingPoint: 1)]
#[spv.Decoration.DescriptorSet(DescriptorSet: 0)]
global_var GV`tex`(spv.StorageClass.UniformConstant): spv.OpTypeArray(ElementType: T0, Length: 2u32)

#[spv.Decoration.Binding(BindingPoint: 1)]
#[spv.Decoration.DescriptorSet(DescriptorSet: 0)]
global_var GV`_tex_sampler`(spv.StorageClass.UniformConstant): spv.OpTypeArray(ElementType: spv.OpTypeSampler, Length: 2u32)

#[spv.ExecutionMode.OriginUpperLeft]
func F`main`() {
    v0 = spv.OpAccessChain(Base: &GV`tex`, 0s32): T1
    v1 = spv.OpLoad(Pointer: v0): T0
    v2 = spv.OpAccessChain(Base: &GV`_tex_sampler`, 0s32): T2
    v3 = spv.OpLoad(Pointer: v2): spv.OpTypeSampler
    v4 = spv.OpSampledImage(Image: v1, Sampler: v3): T3
    v5 = spv.OpImageSampleImplicitLod(SampledImage: v4, Coordinate: f32×2(0.0, 0.0)): f32×4
    spv.OpStore(Pointer: &GV`color`, Object: v5)
    v6 = spv.OpLoad(Pointer: &GV`color`): f32×4
    v7 = spv.OpAccessChain(Base: &GV`tex`, 1s32): T1
    v8 = spv.OpLoad(Pointer: v7): T0
    v9 = spv.OpAccessChain(Base: &GV`_tex_sampler`, 1s32): T2
    v10 = spv.OpLoad(Pointer: v9): spv.OpTypeSampler
    v11 = spv.OpSampledImage(Image: v8, Sampler: v10): T3
    v12 = spv.OpImageSampleImplicitLod(SampledImage: v11, Coordinate: f32×2(0.0, 0.0)): f32×4
    v13 = vec.distribute(f.mul)(v6, v12): f32×4
    spv.OpStore(Pointer: &GV`color`, Object: v13)
  return
}

export {
  spv.OpEntryPoint(spv.ExecutionModel.Fragment, Name: "main"): F`main`,
}