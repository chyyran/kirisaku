module.dialect = spv.Module(version: 1.0, spv.Capability.Shader, spv.MemoryModel.GLSL450)

module.debug_info = spv.Module.DebugInfo(
  generator: spv.Tool(id: 8, version: 11),
  source_languages: {
    spv.SourceLanguage.GLSL(version: 450): {},
  },
)

type T0 = spv.OpTypeImage(SampledType: f32, spv.Dim.2D, Depth: 0, Arrayed: 0, MS: 0, Sampled: 1, spv.ImageFormat.Unknown)

#[spv.Decoration.Location(Location: 0)]
global_var GV`color`(spv.StorageClass.Output): f32×4

#[spv.Decoration.Binding(BindingPoint: 1)]
#[spv.Decoration.DescriptorSet(DescriptorSet: 0)]
global_var GV`tex`(spv.StorageClass.UniformConstant): T0

#[spv.Decoration.Binding(BindingPoint: 1)]
#[spv.Decoration.DescriptorSet(DescriptorSet: 0)]
global_var GV`tex_sampler`(spv.StorageClass.UniformConstant): spv.OpTypeSampler

#[spv.ExecutionMode.OriginUpperLeft]
func F`main`() {
    v0 = spv.OpLoad(Pointer: &GV`tex`): T0
    v1 = spv.OpLoad(Pointer: &GV`tex_sampler`): spv.OpTypeSampler
    v2 = spv.OpSampledImage(Image: v0, Sampler: v1): spv.OpTypeSampledImage(ImageType: T0)
    v3 = spv.OpImageSampleImplicitLod(SampledImage: v2, Coordinate: f32×2(0.0, 0.0)): f32×4
    spv.OpStore(Pointer: &GV`color`, Object: v3)
  return
}

export {
  spv.OpEntryPoint(spv.ExecutionModel.Fragment, Name: "main"): F`main`,
}